open Api;;
open Train;;
open Util;;
open Eval;;
open Print;;
open Type;;

let unittest (size, allowed_ops_tuple, initialguess, outputs) =
  let guess_function x c =
    Printf.eprintf
      "  guess:    %s\n"
      (Print.print x);
    flush_all ();
    Feedback.Success
  in

  (* Solve! *)
  let alllist = Brute.get_candidates ("dummy", size, allowed_ops_tuple) in
  GuessCaller.guess_call
    (List.combine initialguess outputs)
    guess_function
    allowed_ops_tuple
    size
    alllist

let case0 =
10,([],
[Plus],
[STfold]),
[0x0000000000000001L; 0x0000000000000002L; 0x0000000000000004L; 0x0000000000000008L; 0x0000000000000010L; 0x0000000000000020L; 0x0000000000000040L; 0x0000000000000080L; 0x0000000000000100L; 0x0000000000000200L; 0x0000000000000400L; 0x0000000000000800L; 0x0000000000001000L; 0x0000000000002000L; 0x0000000000004000L; 0x0000000000008000L; 0x0000000000010000L; 0x0000000000020000L; 0x0000000000040000L; 0x0000000000080000L; 0x0000000000100000L; 0x0000000000200000L; 0x0000000000400000L; 0x0000000000800000L; 0x0000000001000000L; 0x0000000002000000L; 0x0000000004000000L; 0x0000000008000000L; 0x0000000010000000L; 0x0000000020000000L; 0x0000000040000000L; 0x0000000080000000L; 0x0000000100000000L; 0x0000000200000000L; 0x0000000400000000L; 0x0000000800000000L; 0x0000001000000000L; 0x0000002000000000L; 0x0000004000000000L; 0x0000008000000000L; 0x0000010000000000L; 0x0000020000000000L; 0x0000040000000000L; 0x0000080000000000L; 0x0000100000000000L; 0x0000200000000000L; 0x0000400000000000L; 0x0000800000000000L; 0x0001000000000000L; 0x0002000000000000L; 0x0004000000000000L; 0x0008000000000000L; 0x0010000000000000L; 0x0020000000000000L; 0x0040000000000000L; 0x0080000000000000L; 0x0100000000000000L; 0x0200000000000000L; 0x0400000000000000L; 0x0800000000000000L; 0x1000000000000000L; 0x2000000000000000L; 0x4000000000000000L; 0x8000000000000000L; 0x7e4da13021768aedL; 0x86a7dbc7d766c25dL; 0xd42b00ff080214f6L; 0xa561853c969d91ffL; 0x9b9fa3cf5ddade58L; 0x0602bfa12eb364aaL; 0xd86aa6e93381cd70L; 0xac5fb6cf42234b64L; 0x5a2717ce3827f615L; 0x999d9faa5d868c0bL; 0x6550ea8109e5203eL; 0xb412217992090c4cL; 0x4f68a9e71671fbebL; 0x0aae9184c4d6232bL; 0x08958b85320edc60L; 0x8c1a16fceeb2f7c5L; 0x82fc61725c087a5aL; 0xbfaabaa60b4b83b0L; 0x8957cc081ea6552aL; 0x31901ab3ac3573fdL; 0xedfe3111a6b2dd9fL; 0x8cb09fbd91aa930bL; 0xd23180fc5939eba8L; 0x44d0b9d3eec36f1cL; 0x59e8f1c2d5925e5fL; 0x11139a6ffa889a5eL; 0x80e820ad3436f4e4L; 0x39f1041366df02deL; 0x80eab7c0ef0a7db9L; 0x7245ba8df0378b26L; 0x81d590d855f340cbL; 0xa5b12e7312d124ffL; 0x2114f5e35b4b4a4bL; 0x86041879b2920dcbL; 0x308ccba86b75d51cL; 0x764a36435e747abdL; 0x9f9613743f546aecL; 0xd53ea0a4455a23e0L; 0x5185be9d6d4a7211L; 0x343661e971e17043L; 0x164101b6fc415343L; 0xcde693da80d43b2dL; 0xa67ca3c69c199346L; 0x7fe2abc5a92d9874L; 0x601c970b5b9c81d1L; 0x5cec37b38b3d23a7L; 0x3fedee9ac47a41e0L; 0xcfd4bc08538682d0L; 0x047d1150df8e236fL; 0x232e62059cc0b70aL; 0xfa48612b0af7613eL; 0xf3e821301a0187a3L; 0xa83f894d1f7e0e52L; 0xe5bca8a3cf2fb44eL; 0xac9152362994f504L; 0x3b2af0b102199416L; 0xd8d05b7f192cd5a3L; 0xfc4da95d91f479c1L; 0xed007e6cae89d3a3L; 0x29a906d7e515a2f5L; 0x905a4e8722b6cc76L; 0x0c1c26e30c5fedacL; 0x832817cb9881e170L; 0x267c0dc0e26a1b87L; 0xc64ef767072bef23L; 0x99fd52bd78e5658aL; 0x81ff49a37f0dd6e5L; 0x4d3f51811744baa9L; 0xc7fd7f75ac4d844bL; 0xb40371a6b3f309c2L; 0xb3df4bed01b0e555L; 0x71edecc246443445L; 0x2102df69ff22c271L; 0x50a9183ff3fb013eL; 0xcced7900217b8714L; 0x2c459bf7c6b6f851L; 0x4c8d2ee6d8070e49L; 0xebd59cc195697f19L; 0xf1f948644a25ead0L; 0x1a54e41d48e0156dL; 0x6312503eea0e7eabL; 0xfdc5eb74d8f76c14L; 0x2fdd8a463f0a5e8bL; 0x83228cd938d97fedL; 0x95b77d4de4c9acd1L; 0xb6e9e240229d87dbL; 0x186659b6f055eecfL; 0xbc45e94736c91174L; 0x46e43cfe9c429281L; 0x3c399d6dc6c78c5dL; 0x81bbe081f1b15160L; 0xe183d1e1d04964b6L; 0xc61905b74ddd42d0L; 0x72b906f513d88d33L; 0x071655e5f65ee0c3L; 0xdbd9753fc22ed005L; 0xa917f6bd73bffa88L; 0x039f996ce7457c1fL; 0x2de2dd6c60711a78L; 0xaa2d1620c8dff9b4L; 0x21bb4a93c598d9eeL; 0x6d62520284659343L; 0x02acc9c14ad84b00L; 0xa0d2235400f1d7faL; 0x8eefe74c3dced436L; 0x09f82486c61ea381L; 0xe8112e3acc80d50aL; 0xfb107f6e3a121842L; 0x68ff35cbbefe84aeL; 0xdb7f000489e971a4L; 0x903fb275855a8ecbL; 0x96e9275ef8593398L; 0x99c350bb25c73c0eL; 0x88f79fe3876168ffL; 0xb711a967a0bfda41L; 0xe6b3249ade8ad4e9L; 0x7c873b92f6327cdfL; 0x80f98e23cca5d077L; 0x326799f3e354442dL; 0x37b694459469975bL; 0xdcf85e9c7582b0c7L; 0x44bbe64ecfb6edb2L; 0x99b65d57c0d679aeL; 0xfcf58994b7e7a110L; 0x90bb91f46418c202L; 0x2bd70968c52dfd0cL; 0x7244fe00fe5c77a2L; 0x61c8208094be25bdL; 0xbbdf3bad634bf2a0L; 0xa12a50b8e6bf5f89L; 0x36be906962b11526L; 0xe252933f3d723c4eL; 0x86a503e713beb69eL; 0x622454893855928cL; 0x5327c906f06cdc12L; 0x886e6029eb9bf78eL; 0xd5b60bb448d73952L; 0xd26d63e8fe0e709eL; 0x491e195ca661da0aL; 0x0cff86ff6f1bdb64L; 0xe1a5a072b6fdb127L; 0x0b9c8bba45ef069fL; 0x183ca3d58db08d48L; 0xe650c802267f9eacL; 0x3213f058c18248e2L; 0x039e2d8b73dcae1dL; 0xf7cd27f60d183c8eL; 0x5f6f8595764225cfL; 0xcbd4960ac96dcb6aL; 0x946bfc5e8de44963L; 0x9a14bec6a7e8d208L; 0xd20ff75a11b404e9L; 0xa07b4404adfe5c6fL; 0xde18257a08305d1cL; 0x3f049cc0d91623feL; 0xf00b73982f0a81a1L; 0x0fda6fb272960ae7L; 0xf4cdc4c04a7c05e0L; 0xb41953d963ccdb86L; 0xd4bfbeea48ed108fL; 0xf82aa6239ecbf8b4L; 0x99bc4edc3fe0511aL; 0x62b08bac2f052898L; 0x3bc4f2ea01ced2adL; 0xb955d7d25cb753deL; 0x1ea509b194898bfdL; 0x97152df7d3503b8eL; 0xc5cc4a75f050672cL; 0x936249f83bda775eL; 0x45c9dd0971d32ed8L; 0x6d6ca06f8ce6f4b0L; 0x1a5ccb4d6adab25aL; 0x0096a76546ddee48L; 0xb3e1fa498ff857c3L; 0xc16aca0bf7328e92L; 0xc9f6fa4cfa818522L; 0x05c9c3869500577bL; 0x8d96f924e6da0a00L; 0x3b698e71d61f1c49L; 0x3edbbb8d1c368189L; 0x3bceedfa71e05d97L; 0xe4dc6bd5a85b6a14L; 0x3f8e92ad1a77692cL; 0x20fa6807a765d366L; 0x798ccbca37be33c0L; 0xb7b3fc9c23bbab95L; 0xca257056ced72123L; 0x6f5f4865b3d04257L; 0x62eed9295ee9b2e6L; 0x46dd47b1faeafd93L; 0xcdd1a43c71a0c0f9L; 0x39e0dbf026372e80L],
[0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000002L; 0x0000000000000004L; 0x0000000000000008L; 0x0000000000000010L; 0x0000000000000020L; 0x0000000000000040L; 0x0000000000000080L; 0x0000000000000100L; 0x00000000000000fcL; 0x000000000000010cL; 0x00000000000001a8L; 0x000000000000014aL; 0x0000000000000136L; 0x000000000000000cL; 0x00000000000001b0L; 0x0000000000000158L; 0x00000000000000b4L; 0x0000000000000132L; 0x00000000000000caL; 0x0000000000000168L; 0x000000000000009eL; 0x0000000000000014L; 0x0000000000000010L; 0x0000000000000118L; 0x0000000000000104L; 0x000000000000017eL; 0x0000000000000112L; 0x0000000000000062L; 0x00000000000001daL; 0x0000000000000118L; 0x00000000000001a4L; 0x0000000000000088L; 0x00000000000000b2L; 0x0000000000000022L; 0x0000000000000100L; 0x0000000000000072L; 0x0000000000000100L; 0x00000000000000e4L; 0x0000000000000102L; 0x000000000000014aL; 0x0000000000000042L; 0x000000000000010cL; 0x0000000000000060L; 0x00000000000000ecL; 0x000000000000013eL; 0x00000000000001aaL; 0x00000000000000a2L; 0x0000000000000068L; 0x000000000000002cL; 0x000000000000019aL; 0x000000000000014cL; 0x00000000000000feL; 0x00000000000000c0L; 0x00000000000000b8L; 0x000000000000007eL; 0x000000000000019eL; 0x0000000000000008L; 0x0000000000000046L; 0x00000000000001f4L; 0x00000000000001e6L; 0x0000000000000150L; 0x00000000000001caL; 0x0000000000000158L; 0x0000000000000076L; 0x00000000000001b0L; 0x00000000000001f8L; 0x00000000000001daL; 0x0000000000000052L; 0x0000000000000120L; 0x0000000000000018L; 0x0000000000000106L; 0x000000000000004cL; 0x000000000000018cL; 0x0000000000000132L; 0x0000000000000102L; 0x000000000000009aL; 0x000000000000018eL; 0x0000000000000168L; 0x0000000000000166L; 0x00000000000000e2L; 0x0000000000000042L; 0x00000000000000a0L; 0x0000000000000198L; 0x0000000000000058L; 0x0000000000000098L; 0x00000000000001d6L; 0x00000000000001e2L; 0x0000000000000034L; 0x00000000000000c6L; 0x00000000000001faL; 0x000000000000005eL; 0x0000000000000106L; 0x000000000000012aL; 0x000000000000016cL; 0x0000000000000030L; 0x0000000000000178L; 0x000000000000008cL; 0x0000000000000078L; 0x0000000000000102L; 0x00000000000001c2L; 0x000000000000018cL; 0x00000000000000e4L; 0x000000000000000eL; 0x00000000000001b6L; 0x0000000000000152L; 0x0000000000000006L; 0x000000000000005aL; 0x0000000000000154L; 0x0000000000000042L; 0x00000000000000daL; 0x0000000000000004L; 0x0000000000000140L; 0x000000000000011cL; 0x0000000000000012L; 0x00000000000001d0L; 0x00000000000001f6L; 0x00000000000000d0L; 0x00000000000001b6L; 0x0000000000000120L; 0x000000000000012cL; 0x0000000000000132L; 0x0000000000000110L; 0x000000000000016eL; 0x00000000000001ccL; 0x00000000000000f8L; 0x0000000000000100L; 0x0000000000000064L; 0x000000000000006eL; 0x00000000000001b8L; 0x0000000000000088L; 0x0000000000000132L; 0x00000000000001f8L; 0x0000000000000120L; 0x0000000000000056L; 0x00000000000000e4L; 0x00000000000000c2L; 0x0000000000000176L; 0x0000000000000142L; 0x000000000000006cL; 0x00000000000001c4L; 0x000000000000010cL; 0x00000000000000c4L; 0x00000000000000a6L; 0x0000000000000110L; 0x00000000000001aaL; 0x00000000000001a4L; 0x0000000000000092L; 0x0000000000000018L; 0x00000000000001c2L; 0x0000000000000016L; 0x0000000000000030L; 0x00000000000001ccL; 0x0000000000000064L; 0x0000000000000006L; 0x00000000000001eeL; 0x00000000000000beL; 0x0000000000000196L; 0x0000000000000128L; 0x0000000000000134L; 0x00000000000001a4L; 0x0000000000000140L; 0x00000000000001bcL; 0x000000000000007eL; 0x00000000000001e0L; 0x000000000000001eL; 0x00000000000001e8L; 0x0000000000000168L; 0x00000000000001a8L; 0x00000000000001f0L; 0x0000000000000132L; 0x00000000000000c4L; 0x0000000000000076L; 0x0000000000000172L; 0x000000000000003cL; 0x000000000000012eL; 0x000000000000018aL; 0x0000000000000126L; 0x000000000000008aL; 0x00000000000000daL; 0x0000000000000034L; 0x0000000000000000L; 0x0000000000000166L; 0x0000000000000182L; 0x0000000000000192L; 0x000000000000000aL; 0x000000000000011aL; 0x0000000000000076L; 0x000000000000007cL; 0x0000000000000076L; 0x00000000000001c8L; 0x000000000000007eL; 0x0000000000000040L; 0x00000000000000f2L; 0x000000000000016eL; 0x0000000000000194L; 0x00000000000000deL; 0x00000000000000c4L; 0x000000000000008cL; 0x000000000000019aL; 0x0000000000000072L]


let check_brute id allowed_ops_tuple size challenge count =
  Printf.eprintf
    "id: %s\n  %s\n  size: %d\n  original: %s\n"
    id
    (format_operator_tuple allowed_ops_tuple)
    size
    challenge;
  flush_all ();

  let answers = Brute.gen2 allowed_ops_tuple size in

  Printf.eprintf "Generated size=%d\n" (List.length answers);
  (* List.iter *)
  (*   (fun x -> prerr_endline ("  " ^ (Print.print x))) *)
  (*   answers; *)
  flush_all ();

  let answer = List.nth answers (Random.int (List.length answers)) in
  Printf.eprintf
    "  picked:   %s\n"
    (Print.print answer);
  flush_all ();

  let initialguess =
    let bitseq = 
      Array.to_list
        (Array.init 64 (fun x -> Int64.shift_left 1L x)) in
    let fixedseq =
      [0x0000000000000000L;
       0x0000000000000001L;
       0x0000000000000002L;
       0x0000000000000003L;
       0x0000000000000004L;
       0x0000000000000005L;
       0x0000000000000006L;
       0x0000000000000007L;
       0x0000000000000008L;
       0x0000000000000009L;
       0x000000000000000aL;
       0x000000000000000bL;
       0x00000000FFFFFFFFL;
       0xFFFFFFFF00000000L;
       0x0000FFFF0000FFFFL;
       0xFFFF0000FFFF0000L;
       (* 0x00FF00FF00FF00FFL; *)
       (* 0xFF00FF00FF00FF00L; *)
       (* 0x0F0F0F0F0F0F0F0FL; *)
       (* 0xF0F0F0F0F0F0F0F0L; *)
       (* 0x3333333333333333L; *)
       (* 0xCCCCCCCCCCCCCCCCL; *)
       (* 0x5555555555555555L; *)
       (* 0xAAAAAAAAAAAAAAAAL; *)
       (* 0x0000FFFFFFFF0000L; *)
       (* 0xFFFF00000000FFFFL; *)
       (* 0xFF0000FFFF0000FFL; *)
       (* 0x00FFFF0000FFFF00L; *)
       (* 0xF00FF00FF00FF00FL; *)
       (* 0x0FF00FF00FF00FF0L; *)
       (* 0xDEADBEEFDEADBEEFL; *)
       0xFFFFFFFFFFFFFFFFL
      ] in
    let randseq = 
      Array.to_list
        (Random.init 0;
         Array.init
           (256 - (List.length bitseq) - (List.length fixedseq))
           (fun _ -> rand64 ()))
    in
    bitseq @ fixedseq @ randseq
  in

  let outputs =
    List.map
      (fun x ->
        eval answer x)
      initialguess
  in

  let guess_function x c =
    Printf.eprintf
      "  guess:    %s\n"
      (Print.print x);
    flush_all ();
    count := !count + c;
    Feedback.Success
  in

  (* Solve! *)
  let alllist = Brute.gen2 allowed_ops_tuple size in
  GuessCaller.guess_call
    (List.combine initialguess outputs)
    guess_function
    allowed_ops_tuple
    size
    alllist
;;

let rec check_by_train_list () =
  let train_string = read_line () in
  let train = parse_train_string train_string in
  let id, size, allowed_ops_tuple, challenge = train in

  let count = ref 0 in

  check_brute id allowed_ops_tuple 12 challenge count;
  check_by_train_list ()
;;

let check_by_problems () =
  let problems_string = read_line () in
  let problems_json = Yojson.Safe.from_string problems_string in
  let problems = Problem.parse_problems_json problems_json in

  let sorted_problems =
    List.sort
      (fun (_, x_size, (_, _, x_s), _, _) (_, y_size, (_, _, y_s), _, _) ->
        let l_diff = (List.length x_s) - (List.length y_s) in
        if l_diff != 0
        then l_diff
        else x_size - y_size)
      problems
  in

  let count = ref 0 in

  List.iter
    (fun (id, size, allowed_ops_tuple, solved, time_over) ->
      if size < 12 then
        begin
          ();
          (* Printf.eprintf "Count: %d" !count; *)
          (* failwith "stop" *)
        end
      else
        check_brute
          id
          allowed_ops_tuple
          size
          ((if solved then "T" else "F") ^ ", " ^ (string_of_float time_over)) count)
    sorted_problems
;;

unittest case0
(* check_by_train_list () *)
(* check_by_problems () *)
