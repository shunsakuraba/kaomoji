open Api;;
open Train;;
open Util;;
open Eval;;
open Print;;
open Type;;

let unittest (_, size, allowed_ops_tuple, initialguess, outputs) =
  let guess_function x c =
    Printf.eprintf
      "  guess:    %s\n"
      (Print.print x);
    flush_all ();
    Feedback.Success
  in

  (* Solve! *)
  let alllist, _ = Brute.get_candidates ("dummy", size, allowed_ops_tuple) size in
  GuessCaller.guess_call
    (List.combine initialguess outputs)
    guess_function
    allowed_ops_tuple
    size
    alllist

let case0 =
"",
10,([],
[Plus],
[STfold]),
[0x0000000000000001L; 0x0000000000000002L; 0x0000000000000004L; 0x0000000000000008L; 0x0000000000000010L; 0x0000000000000020L; 0x0000000000000040L; 0x0000000000000080L; 0x0000000000000100L; 0x0000000000000200L; 0x0000000000000400L; 0x0000000000000800L; 0x0000000000001000L; 0x0000000000002000L; 0x0000000000004000L; 0x0000000000008000L; 0x0000000000010000L; 0x0000000000020000L; 0x0000000000040000L; 0x0000000000080000L; 0x0000000000100000L; 0x0000000000200000L; 0x0000000000400000L; 0x0000000000800000L; 0x0000000001000000L; 0x0000000002000000L; 0x0000000004000000L; 0x0000000008000000L; 0x0000000010000000L; 0x0000000020000000L; 0x0000000040000000L; 0x0000000080000000L; 0x0000000100000000L; 0x0000000200000000L; 0x0000000400000000L; 0x0000000800000000L; 0x0000001000000000L; 0x0000002000000000L; 0x0000004000000000L; 0x0000008000000000L; 0x0000010000000000L; 0x0000020000000000L; 0x0000040000000000L; 0x0000080000000000L; 0x0000100000000000L; 0x0000200000000000L; 0x0000400000000000L; 0x0000800000000000L; 0x0001000000000000L; 0x0002000000000000L; 0x0004000000000000L; 0x0008000000000000L; 0x0010000000000000L; 0x0020000000000000L; 0x0040000000000000L; 0x0080000000000000L; 0x0100000000000000L; 0x0200000000000000L; 0x0400000000000000L; 0x0800000000000000L; 0x1000000000000000L; 0x2000000000000000L; 0x4000000000000000L; 0x8000000000000000L; 0x7e4da13021768aedL; 0x86a7dbc7d766c25dL; 0xd42b00ff080214f6L; 0xa561853c969d91ffL; 0x9b9fa3cf5ddade58L; 0x0602bfa12eb364aaL; 0xd86aa6e93381cd70L; 0xac5fb6cf42234b64L; 0x5a2717ce3827f615L; 0x999d9faa5d868c0bL; 0x6550ea8109e5203eL; 0xb412217992090c4cL; 0x4f68a9e71671fbebL; 0x0aae9184c4d6232bL; 0x08958b85320edc60L; 0x8c1a16fceeb2f7c5L; 0x82fc61725c087a5aL; 0xbfaabaa60b4b83b0L; 0x8957cc081ea6552aL; 0x31901ab3ac3573fdL; 0xedfe3111a6b2dd9fL; 0x8cb09fbd91aa930bL; 0xd23180fc5939eba8L; 0x44d0b9d3eec36f1cL; 0x59e8f1c2d5925e5fL; 0x11139a6ffa889a5eL; 0x80e820ad3436f4e4L; 0x39f1041366df02deL; 0x80eab7c0ef0a7db9L; 0x7245ba8df0378b26L; 0x81d590d855f340cbL; 0xa5b12e7312d124ffL; 0x2114f5e35b4b4a4bL; 0x86041879b2920dcbL; 0x308ccba86b75d51cL; 0x764a36435e747abdL; 0x9f9613743f546aecL; 0xd53ea0a4455a23e0L; 0x5185be9d6d4a7211L; 0x343661e971e17043L; 0x164101b6fc415343L; 0xcde693da80d43b2dL; 0xa67ca3c69c199346L; 0x7fe2abc5a92d9874L; 0x601c970b5b9c81d1L; 0x5cec37b38b3d23a7L; 0x3fedee9ac47a41e0L; 0xcfd4bc08538682d0L; 0x047d1150df8e236fL; 0x232e62059cc0b70aL; 0xfa48612b0af7613eL; 0xf3e821301a0187a3L; 0xa83f894d1f7e0e52L; 0xe5bca8a3cf2fb44eL; 0xac9152362994f504L; 0x3b2af0b102199416L; 0xd8d05b7f192cd5a3L; 0xfc4da95d91f479c1L; 0xed007e6cae89d3a3L; 0x29a906d7e515a2f5L; 0x905a4e8722b6cc76L; 0x0c1c26e30c5fedacL; 0x832817cb9881e170L; 0x267c0dc0e26a1b87L; 0xc64ef767072bef23L; 0x99fd52bd78e5658aL; 0x81ff49a37f0dd6e5L; 0x4d3f51811744baa9L; 0xc7fd7f75ac4d844bL; 0xb40371a6b3f309c2L; 0xb3df4bed01b0e555L; 0x71edecc246443445L; 0x2102df69ff22c271L; 0x50a9183ff3fb013eL; 0xcced7900217b8714L; 0x2c459bf7c6b6f851L; 0x4c8d2ee6d8070e49L; 0xebd59cc195697f19L; 0xf1f948644a25ead0L; 0x1a54e41d48e0156dL; 0x6312503eea0e7eabL; 0xfdc5eb74d8f76c14L; 0x2fdd8a463f0a5e8bL; 0x83228cd938d97fedL; 0x95b77d4de4c9acd1L; 0xb6e9e240229d87dbL; 0x186659b6f055eecfL; 0xbc45e94736c91174L; 0x46e43cfe9c429281L; 0x3c399d6dc6c78c5dL; 0x81bbe081f1b15160L; 0xe183d1e1d04964b6L; 0xc61905b74ddd42d0L; 0x72b906f513d88d33L; 0x071655e5f65ee0c3L; 0xdbd9753fc22ed005L; 0xa917f6bd73bffa88L; 0x039f996ce7457c1fL; 0x2de2dd6c60711a78L; 0xaa2d1620c8dff9b4L; 0x21bb4a93c598d9eeL; 0x6d62520284659343L; 0x02acc9c14ad84b00L; 0xa0d2235400f1d7faL; 0x8eefe74c3dced436L; 0x09f82486c61ea381L; 0xe8112e3acc80d50aL; 0xfb107f6e3a121842L; 0x68ff35cbbefe84aeL; 0xdb7f000489e971a4L; 0x903fb275855a8ecbL; 0x96e9275ef8593398L; 0x99c350bb25c73c0eL; 0x88f79fe3876168ffL; 0xb711a967a0bfda41L; 0xe6b3249ade8ad4e9L; 0x7c873b92f6327cdfL; 0x80f98e23cca5d077L; 0x326799f3e354442dL; 0x37b694459469975bL; 0xdcf85e9c7582b0c7L; 0x44bbe64ecfb6edb2L; 0x99b65d57c0d679aeL; 0xfcf58994b7e7a110L; 0x90bb91f46418c202L; 0x2bd70968c52dfd0cL; 0x7244fe00fe5c77a2L; 0x61c8208094be25bdL; 0xbbdf3bad634bf2a0L; 0xa12a50b8e6bf5f89L; 0x36be906962b11526L; 0xe252933f3d723c4eL; 0x86a503e713beb69eL; 0x622454893855928cL; 0x5327c906f06cdc12L; 0x886e6029eb9bf78eL; 0xd5b60bb448d73952L; 0xd26d63e8fe0e709eL; 0x491e195ca661da0aL; 0x0cff86ff6f1bdb64L; 0xe1a5a072b6fdb127L; 0x0b9c8bba45ef069fL; 0x183ca3d58db08d48L; 0xe650c802267f9eacL; 0x3213f058c18248e2L; 0x039e2d8b73dcae1dL; 0xf7cd27f60d183c8eL; 0x5f6f8595764225cfL; 0xcbd4960ac96dcb6aL; 0x946bfc5e8de44963L; 0x9a14bec6a7e8d208L; 0xd20ff75a11b404e9L; 0xa07b4404adfe5c6fL; 0xde18257a08305d1cL; 0x3f049cc0d91623feL; 0xf00b73982f0a81a1L; 0x0fda6fb272960ae7L; 0xf4cdc4c04a7c05e0L; 0xb41953d963ccdb86L; 0xd4bfbeea48ed108fL; 0xf82aa6239ecbf8b4L; 0x99bc4edc3fe0511aL; 0x62b08bac2f052898L; 0x3bc4f2ea01ced2adL; 0xb955d7d25cb753deL; 0x1ea509b194898bfdL; 0x97152df7d3503b8eL; 0xc5cc4a75f050672cL; 0x936249f83bda775eL; 0x45c9dd0971d32ed8L; 0x6d6ca06f8ce6f4b0L; 0x1a5ccb4d6adab25aL; 0x0096a76546ddee48L; 0xb3e1fa498ff857c3L; 0xc16aca0bf7328e92L; 0xc9f6fa4cfa818522L; 0x05c9c3869500577bL; 0x8d96f924e6da0a00L; 0x3b698e71d61f1c49L; 0x3edbbb8d1c368189L; 0x3bceedfa71e05d97L; 0xe4dc6bd5a85b6a14L; 0x3f8e92ad1a77692cL; 0x20fa6807a765d366L; 0x798ccbca37be33c0L; 0xb7b3fc9c23bbab95L; 0xca257056ced72123L; 0x6f5f4865b3d04257L; 0x62eed9295ee9b2e6L; 0x46dd47b1faeafd93L; 0xcdd1a43c71a0c0f9L; 0x39e0dbf026372e80L],
[0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000000L; 0x0000000000000002L; 0x0000000000000004L; 0x0000000000000008L; 0x0000000000000010L; 0x0000000000000020L; 0x0000000000000040L; 0x0000000000000080L; 0x0000000000000100L; 0x00000000000000fcL; 0x000000000000010cL; 0x00000000000001a8L; 0x000000000000014aL; 0x0000000000000136L; 0x000000000000000cL; 0x00000000000001b0L; 0x0000000000000158L; 0x00000000000000b4L; 0x0000000000000132L; 0x00000000000000caL; 0x0000000000000168L; 0x000000000000009eL; 0x0000000000000014L; 0x0000000000000010L; 0x0000000000000118L; 0x0000000000000104L; 0x000000000000017eL; 0x0000000000000112L; 0x0000000000000062L; 0x00000000000001daL; 0x0000000000000118L; 0x00000000000001a4L; 0x0000000000000088L; 0x00000000000000b2L; 0x0000000000000022L; 0x0000000000000100L; 0x0000000000000072L; 0x0000000000000100L; 0x00000000000000e4L; 0x0000000000000102L; 0x000000000000014aL; 0x0000000000000042L; 0x000000000000010cL; 0x0000000000000060L; 0x00000000000000ecL; 0x000000000000013eL; 0x00000000000001aaL; 0x00000000000000a2L; 0x0000000000000068L; 0x000000000000002cL; 0x000000000000019aL; 0x000000000000014cL; 0x00000000000000feL; 0x00000000000000c0L; 0x00000000000000b8L; 0x000000000000007eL; 0x000000000000019eL; 0x0000000000000008L; 0x0000000000000046L; 0x00000000000001f4L; 0x00000000000001e6L; 0x0000000000000150L; 0x00000000000001caL; 0x0000000000000158L; 0x0000000000000076L; 0x00000000000001b0L; 0x00000000000001f8L; 0x00000000000001daL; 0x0000000000000052L; 0x0000000000000120L; 0x0000000000000018L; 0x0000000000000106L; 0x000000000000004cL; 0x000000000000018cL; 0x0000000000000132L; 0x0000000000000102L; 0x000000000000009aL; 0x000000000000018eL; 0x0000000000000168L; 0x0000000000000166L; 0x00000000000000e2L; 0x0000000000000042L; 0x00000000000000a0L; 0x0000000000000198L; 0x0000000000000058L; 0x0000000000000098L; 0x00000000000001d6L; 0x00000000000001e2L; 0x0000000000000034L; 0x00000000000000c6L; 0x00000000000001faL; 0x000000000000005eL; 0x0000000000000106L; 0x000000000000012aL; 0x000000000000016cL; 0x0000000000000030L; 0x0000000000000178L; 0x000000000000008cL; 0x0000000000000078L; 0x0000000000000102L; 0x00000000000001c2L; 0x000000000000018cL; 0x00000000000000e4L; 0x000000000000000eL; 0x00000000000001b6L; 0x0000000000000152L; 0x0000000000000006L; 0x000000000000005aL; 0x0000000000000154L; 0x0000000000000042L; 0x00000000000000daL; 0x0000000000000004L; 0x0000000000000140L; 0x000000000000011cL; 0x0000000000000012L; 0x00000000000001d0L; 0x00000000000001f6L; 0x00000000000000d0L; 0x00000000000001b6L; 0x0000000000000120L; 0x000000000000012cL; 0x0000000000000132L; 0x0000000000000110L; 0x000000000000016eL; 0x00000000000001ccL; 0x00000000000000f8L; 0x0000000000000100L; 0x0000000000000064L; 0x000000000000006eL; 0x00000000000001b8L; 0x0000000000000088L; 0x0000000000000132L; 0x00000000000001f8L; 0x0000000000000120L; 0x0000000000000056L; 0x00000000000000e4L; 0x00000000000000c2L; 0x0000000000000176L; 0x0000000000000142L; 0x000000000000006cL; 0x00000000000001c4L; 0x000000000000010cL; 0x00000000000000c4L; 0x00000000000000a6L; 0x0000000000000110L; 0x00000000000001aaL; 0x00000000000001a4L; 0x0000000000000092L; 0x0000000000000018L; 0x00000000000001c2L; 0x0000000000000016L; 0x0000000000000030L; 0x00000000000001ccL; 0x0000000000000064L; 0x0000000000000006L; 0x00000000000001eeL; 0x00000000000000beL; 0x0000000000000196L; 0x0000000000000128L; 0x0000000000000134L; 0x00000000000001a4L; 0x0000000000000140L; 0x00000000000001bcL; 0x000000000000007eL; 0x00000000000001e0L; 0x000000000000001eL; 0x00000000000001e8L; 0x0000000000000168L; 0x00000000000001a8L; 0x00000000000001f0L; 0x0000000000000132L; 0x00000000000000c4L; 0x0000000000000076L; 0x0000000000000172L; 0x000000000000003cL; 0x000000000000012eL; 0x000000000000018aL; 0x0000000000000126L; 0x000000000000008aL; 0x00000000000000daL; 0x0000000000000034L; 0x0000000000000000L; 0x0000000000000166L; 0x0000000000000182L; 0x0000000000000192L; 0x000000000000000aL; 0x000000000000011aL; 0x0000000000000076L; 0x000000000000007cL; 0x0000000000000076L; 0x00000000000001c8L; 0x000000000000007eL; 0x0000000000000040L; 0x00000000000000f2L; 0x000000000000016eL; 0x0000000000000194L; 0x00000000000000deL; 0x00000000000000c4L; 0x000000000000008cL; 0x000000000000019aL; 0x0000000000000072L]

let case1 =
("aZNBVKqqPNmNKDrhaE2WHfYj",
12,
([Shr4; Not], [Plus; And], [STfold]),
[0x0000000000000001L; 0x0000000000000002L; 0x0000000000000004L; 0x0000000000000008L; 0x0000000000000010L; 0x0000000000000020L; 0x0000000000000040L; 0x0000000000000080L; 0x0000000000000100L; 0x0000000000000200L; 0x0000000000000400L; 0x0000000000000800L; 0x0000000000001000L; 0x0000000000002000L; 0x0000000000004000L; 0x0000000000008000L; 0x0000000000010000L; 0x0000000000020000L; 0x0000000000040000L; 0x0000000000080000L; 0x0000000000100000L; 0x0000000000200000L; 0x0000000000400000L; 0x0000000000800000L; 0x0000000001000000L; 0x0000000002000000L; 0x0000000004000000L; 0x0000000008000000L; 0x0000000010000000L; 0x0000000020000000L; 0x0000000040000000L; 0x0000000080000000L; 0x0000000100000000L; 0x0000000200000000L; 0x0000000400000000L; 0x0000000800000000L; 0x0000001000000000L; 0x0000002000000000L; 0x0000004000000000L; 0x0000008000000000L; 0x0000010000000000L; 0x0000020000000000L; 0x0000040000000000L; 0x0000080000000000L; 0x0000100000000000L; 0x0000200000000000L; 0x0000400000000000L; 0x0000800000000000L; 0x0001000000000000L; 0x0002000000000000L; 0x0004000000000000L; 0x0008000000000000L; 0x0010000000000000L; 0x0020000000000000L; 0x0040000000000000L; 0x0080000000000000L; 0x0100000000000000L; 0x0200000000000000L; 0x0400000000000000L; 0x0800000000000000L; 0x1000000000000000L; 0x2000000000000000L; 0x4000000000000000L; 0x8000000000000000L; 0x92d0dad735c10f00L; 0x28d8122dc8c5afd5L; 0x0cfb40be72c43785L; 0x7dcb10dfc2eb6a51L; 0xcf89bd9dd17402ddL; 0xdd3da094cf16e7f9L; 0x9f1f412b8ba873d2L; 0x9a39c3826348b8ffL; 0xfb76af53b4a98e69L; 0xd4d18049edd19448L; 0x5538afd4ae84df2fL; 0xe078d5e4a2ed5054L; 0xc39994bde7e9a968L; 0x6f394b17805fba43L; 0xd97a8184a3a3e00aL; 0x1a0d43a6905c796eL; 0xed1f67dd81e24d05L; 0xf5765f75c4f7139aL; 0x8af3d04f6b2f9d41L; 0xa60a326d8be17de2L; 0x834e5143f28ab4c3L; 0x4d63399a3911a2e8L; 0x7b10782d6984c37aL; 0xde238ff42c029424L; 0x152a23eb02c483b6L; 0x82cc721e222669aeL; 0x6c967b071c0068a2L; 0xf0036c4c9917f1feL; 0xbfdedf06f76bb634L; 0x44f010c82e3ec001L; 0xa5e9ff7c837d9541L; 0xe90ff75e07f020d3L; 0xdea1e77f39d9f1a3L; 0xed524f02ded4621cL; 0xc90793da362ca5a1L; 0x649826b26fd642b1L; 0xb6e7a0e950eff649L; 0x04841ae09043b949L; 0x23a9ca46bd941d81L; 0x07f532b57ee2c80cL; 0x1ca0479f6a0ce3e2L; 0x7dc16b0c3a928825L; 0x1120a19b181dd5d4L; 0x193bacebd699f73fL; 0x44ddf9bcb667a64fL; 0x7f3cb6d8eaf57364L; 0xa3213155a7d2a96eL; 0x9af5542af98f1eb0L; 0x49158274a10b41a3L; 0x7e2b62b091eb1142L; 0xbef10f3a3b997b78L; 0x278571af8df5e19bL; 0x59a389842794188cL; 0x86933707de17ac75L; 0xff4de4a6dd14ff4fL; 0x81d651fc60f0f8f8L; 0xb6199a3fdd1bbfceL; 0x36ddb4c3d834b9b5L; 0xaab53856fd1ebbb2L; 0xe13826b607f3b036L; 0x2a4c99ac5e179ad5L; 0xdf152950735f9799L; 0xe9db9f31ca880904L; 0xd358d6d6e32019a4L; 0x92c6bd28a477e78eL; 0x38ff170379a9e331L; 0x3d53eb61bf605234L; 0x17f9b4910c0da7a9L; 0x0f4bc2bc601e45c0L; 0x5f7743f73c8cee95L; 0x8e19f11176a547b5L; 0xad6174d362825089L; 0x13326650a322b7dcL; 0x6efcd53104563899L; 0x8e375e628893450dL; 0x0d3265b23840c5f8L; 0x682fdb4b22998745L; 0xd4bcb56015934f7bL; 0x6bc3f68e26d60585L; 0x3da6100be409b277L; 0xfa7e838e0d9ce229L; 0x33699fa6816ae88cL; 0xae39fe14ba545695L; 0xc4e88cb3b782feeaL; 0xdbde187dfc9f618bL; 0x517d14f15e91ba17L; 0x37ff44a86e5dc93eL; 0xcefcdad0d0913dabL; 0x1a5a4575e3b67faaL; 0x352c1bc497750fdfL; 0x2710c84eda5c9349L; 0xd0d467c8b09cb8b0L; 0x51e6a82022711393L; 0x63dffddef9181804L; 0x40609db3fe0bd087L; 0x7eefe548855b5422L; 0xcbb46f4efbf10b56L; 0x3f357de99e0d8354L; 0x2ee4b8872a45ee00L; 0x306555b6d2d362adL; 0x27e29aa8971b9bb5L; 0x9a7022cd18ece956L; 0x1b78179d143080e5L; 0xa504d20023db16ceL; 0x4cfe4725459ff510L; 0xfb48f849189cef31L; 0xece320ba45808707L; 0x510f99688a2aae68L; 0x9c975e6caf0e459cL; 0x128f3c9dab452fe4L; 0x4068360ccbcac2d9L; 0x8b072693a34c39d6L; 0xae46b503ec55508bL; 0xe1dce2b09bd6dfddL; 0x454cc6a35d382f5aL; 0x15f8780eaeaf17abL; 0xf5d2cb47db0e266bL; 0x67824fe5b8dcb1e2L; 0x1d03f3cd9058e290L; 0xe136fda683d8eacbL; 0x36a44d54b9aa0d2dL; 0xfeefa4702c19d84aL; 0x73916ee48c5a2eb8L; 0x8132032e103df5e8L; 0x9df03cd5c6ee7367L; 0x4323c8afd2f00bc3L; 0x8030ec35085e9781L; 0xe17b9c301da9be6fL; 0x006a269c92ea4086L; 0x254a8dd925d5a420L; 0x9aeee765e8a6e279L; 0xb2d8dde5cf4189feL; 0xa6cdd06ae36b4cd5L; 0xd0e24017800fa61dL; 0xc3f58dd99b060a5fL; 0xbee2b7d09545731dL; 0x5579bd72ff882ca6L; 0xa0d8274f2d9c78e4L; 0x8b223753daebd435L; 0x716c5ec131c78ae7L; 0x1daa8a95919c3bbdL; 0xfbaffae498568883L; 0x889d785a773ddb20L; 0xefc1e8bddeaf16ecL; 0x1bd00255b3fa9070L; 0x772a17b89307252dL; 0xdcd191bf5339eca8L; 0x2a9f75d93c18b9a5L; 0x967a8e36f881483aL; 0x3a70a6e3491ce828L; 0x6c45421408e6779aL; 0x6977482bfd12292aL; 0xf23c63a82911df7cL; 0xae5131fcc68259e1L; 0xbd0640592800833eL; 0x4d60e8d6e81abc3cL; 0xc73089e352eb5b13L; 0x41ba593db629bf2dL; 0x83179aff50d3af4bL; 0xcad3168e33880a93L; 0x64efcfc81c0aab19L; 0x24bd0525dda4bebcL; 0x02c2124edc062ea3L; 0x88cdd9724d0d041fL; 0xb8d26a20d863f28cL; 0x0339a35bf3d70627L; 0xbf3125e8a7b4979eL; 0x0021a52aaa07c299L; 0x73450a4566c69febL; 0xb39f8b43fed168d4L; 0xb24a7bcc60e833dfL; 0xeb9f627df9670ba4L; 0x380eaa73bd2561d6L; 0x76c28c50f329fbabL; 0x5f2774839bcbb39aL; 0xc883a2bc19fb1f83L; 0xdcc5f22227b126a4L; 0xcf693d7caf504dacL; 0x9d07817caf60e613L; 0x0e57e4537ae11fbaL; 0x35c4d9dfef6fdadaL; 0x5642b49824f0f09cL; 0xd3e1aaac8dc46e15L; 0x16fdd3fa88655deeL; 0xe96e76a953bc4231L; 0xfcec35d96d3dde22L; 0xd22d6a19fb3bbf80L; 0x96afc47f5140f4e5L; 0xa8c807626144d7d7L; 0x91a84481800b1d41L; 0x11548e30365c6c16L; 0xabd91e9ed4949327L],
[0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L; 0x0000000000000001L; 0x0000000000000001L; 0x0000000000000002L])




let case2 =
("Rzi0jISMxVpjI6cgho26TV8p",
14,
([Shr1], [Or], [SIf0]),
[0x0000000000000001L; 0x0000000000000002L; 0x0000000000000004L; 0x0000000000000008L; 0x0000000000000010L; 0x0000000000000020L; 0x0000000000000040L; 0x0000000000000080L; 0x0000000000000100L; 0x0000000000000200L; 0x0000000000000400L; 0x0000000000000800L; 0x0000000000001000L; 0x0000000000002000L; 0x0000000000004000L; 0x0000000000008000L; 0x0000000000010000L; 0x0000000000020000L; 0x0000000000040000L; 0x0000000000080000L; 0x0000000000100000L; 0x0000000000200000L; 0x0000000000400000L; 0x0000000000800000L; 0x0000000001000000L; 0x0000000002000000L; 0x0000000004000000L; 0x0000000008000000L; 0x0000000010000000L; 0x0000000020000000L; 0x0000000040000000L; 0x0000000080000000L; 0x0000000100000000L; 0x0000000200000000L; 0x0000000400000000L; 0x0000000800000000L; 0x0000001000000000L; 0x0000002000000000L; 0x0000004000000000L; 0x0000008000000000L; 0x0000010000000000L; 0x0000020000000000L; 0x0000040000000000L; 0x0000080000000000L; 0x0000100000000000L; 0x0000200000000000L; 0x0000400000000000L; 0x0000800000000000L; 0x0001000000000000L; 0x0002000000000000L; 0x0004000000000000L; 0x0008000000000000L; 0x0010000000000000L; 0x0020000000000000L; 0x0040000000000000L; 0x0080000000000000L; 0x0100000000000000L; 0x0200000000000000L; 0x0400000000000000L; 0x0800000000000000L; 0x1000000000000000L; 0x2000000000000000L; 0x4000000000000000L; 0x8000000000000000L; 0x30cfc17be7a5f86aL; 0xf1dfbd7127039d5cL; 0x3546eeed8fa4f488L; 0xae8f42597775714dL; 0x727c5b268eccd412L; 0x19bf91734d42b4adL; 0x55fa9240992af4acL; 0x62a0240e90c8c72eL; 0x03afa9f35d0d0386L; 0x6416dda0c058b1baL; 0x3538e15b19000552L; 0xe72b2dfad7ca867dL; 0x1d225b090a3b3a70L; 0x84f753c1eba09d46L; 0xfcc27a2e6796115dL; 0x4aabad01803f1ea2L; 0x5533fc29cc62964bL; 0xf5de747c0a844c3aL; 0xdeffbf05125ec1d2L; 0xeebad57aff37e9e0L; 0xbc33d2cb3b6dd18fL; 0x02a443a407ecdcc7L; 0xe4293d0b56a25e46L; 0x4c023a22358c45dfL; 0x838164c7a9e396c1L; 0xa0976e8e34f321e3L; 0xaa9f5b88bf6c1441L; 0x756eb9c04757a428L; 0xfb766daeb0762beaL; 0x0dbbf3d2f05a5e70L; 0xf16e790ad3a3c3ebL; 0x5108243a969ce567L; 0x1bb2ee216a26664aL; 0x2d4bfa9acac89a0dL; 0x181da0654aec63bdL; 0xdc54475c66df8a8aL; 0x2ab44b4f96e68229L; 0x1d80dd23173c79e3L; 0x8bbbe6186ca8c9f7L; 0xcb9008dadf60ef56L; 0x97e73a4e94db2c98L; 0xe205860f0f16ea7eL; 0xe5e35212f0dcc9f7L; 0x6cccfb24f0519561L; 0x317ea6d3cfca1081L; 0x282dddaaad4d7ed6L; 0x0c808d2ebcc8020aL; 0xf4a1800d0415d560L; 0xc29df82394ce3827L; 0x1abe4ab9faea656fL; 0x36496d1ad0705b78L; 0x909fcfad7bbb1ba0L; 0xfd98853373b1c38eL; 0x87c555066f3016e3L; 0xdf2de376d2ff8e26L; 0x887811f609140580L; 0x258084bda6935474L; 0x6b4016c0d0280106L; 0x99afe87c42de5ea1L; 0xfd358316b5821010L; 0xeb104628550425e5L; 0xa0452155d40d01ceL; 0x5a0cee42b97bd61aL; 0x59a471783a0cd3b0L; 0x07541b550983e6d1L; 0xc607894516d95333L; 0xb8524b591930f0f0L; 0xb655ca24807b4a45L; 0x36eeae22b1d59c5dL; 0xab857086328f5472L; 0xb8d86e39cd6f241dL; 0x0fdd58368508fc41L; 0x3bc4f4d397a2a392L; 0x29f61d8fbaf8d392L; 0x0805492ba6966728L; 0xb8a1a62d7d1ea80dL; 0x4cffaeef96f95c00L; 0x0b85f7dfd413af80L; 0xb18a30177aefbf10L; 0x2ffc1969fb4d001aL; 0xb2a87295369f013cL; 0x613f1d37705c86d2L; 0x983bfaf1f2b6b2e0L; 0xb401171dc35bb9a7L; 0x836a544e739c5773L; 0x8853d7b5c9ab8706L; 0x6a2365ff09a6036fL; 0x1eb353137d018e44L; 0xeb3fcc41a19d978eL; 0x93f27c519ee22c64L; 0x07b84f49359263d4L; 0x3ce6027024df7ef3L; 0xb3857aaaac6eb33dL; 0x303151e412002b97L; 0x823f3755ac75a145L; 0xf4489c45ffcedec7L; 0x1011644843e50c06L; 0xa4b849f6ed38ce18L; 0x31a7ae42bdc2d4e5L; 0xf40812a6fdb7ae15L; 0xd1f4fd9b3e27ad6eL; 0xf92fc0b278993443L; 0xb61a635f8f7b305bL; 0xb748fd47034c8ad3L; 0x610e05645a77cf72L; 0xe598462b5c3152b2L; 0xa14456bb4060a236L; 0x62bb8165a4ff5a5eL; 0xfc05cc96b22c4ec8L; 0xdcd589dbe6436b10L; 0x68cdc02b700e51f4L; 0xe1a643e9bb15b3bcL; 0x498b5d482fcb8d6fL; 0xad80e75df9778c88L; 0x28c455ad39b1a808L; 0xb0c082b0a64741e2L; 0x55264dc207f966d2L; 0x03b6f6bf0bdf10caL; 0xa0bfb087d9876377L; 0x0d0caede2d210cd0L; 0x5fa7853cfaa6a588L; 0x9490537aaf81b808L; 0xa7dae3dc9ac9c2eeL; 0x3fefd190d8f74df4L; 0x91dbce30652039c3L; 0x1d649eab5de5e859L; 0x31b11146e0919c80L; 0xd3df95a563bbd2feL; 0x396efa44b2bbd0c4L; 0xda79b4e52dfa1841L; 0xc9d2f6c33d14fd99L; 0x4858cb30f52ed02eL; 0x07414a2b86e7d0a5L; 0x1727f39648529082L; 0xb63747ef36ba48d6L; 0x5421d14066fc8429L; 0x25c8fb2377c252f7L; 0xc4833760850d77a6L; 0x8e45edd06d34b6e0L; 0x9ccbec675afdaa2eL; 0x097fcf7579d0a48dL; 0xf736b7be53bb649dL; 0x5c4c253d3445244aL; 0x1a09d58d6b9599a7L; 0x62100a5c231f4289L; 0x88ae7f68740f81d7L; 0x18693fb3773686d7L; 0x0922961710d3afcbL; 0x9b744a9088c928e5L; 0x6a77da2f935341a8L; 0x4ab3bb7dd09e4422L; 0x89cd7163e8bac547L; 0xc5d95a6579b596c7L; 0x6934267d76cccf7eL; 0xd33b7a2f4015bb69L; 0x288ae022861b5785L; 0xa9d5955a8a0d99dbL; 0x9d2720f624b1ed75L; 0xe6b2f4e6f396bd52L; 0xfebff95ef52bd9ccL; 0x46bca730372bb48bL; 0x525e617593044065L; 0xcb89ff7c8e56c0b4L; 0x175b310dc1c5ad10L; 0x2fc16c8583ecd328L; 0x8045fc916eaab704L; 0x78f44bb43719d820L; 0x773f7da5d01ea085L; 0xa0b07e6f87e62866L; 0x0bd940b939ddeaedL; 0x5e5c506518de9107L; 0x74a91b66fb64cbefL; 0xf721a2916fce8e9dL; 0x5ce942e2e0d9a257L; 0x9281e01b18e9d589L; 0x4b3e6f7c9eeb842eL; 0x38d3b889313dc12fL; 0x39fa6ef58fe811d9L; 0x9c5606690409083fL; 0x414e554317092efdL; 0x0c9a0ff107517c62L; 0xfcf80d8d780aaa5aL; 0x7b0e8cbe22e6a32cL; 0xc33d5973221bdcbbL; 0x239cbecbae004eb1L; 0x9cc718e460ed7bd4L; 0xa63d8eaf128a26caL; 0x4a7335c35f3920b2L; 0xad77c8c16f340ac0L; 0x9729d1f293a55c2bL; 0xc33b76b0a3fdb3bcL; 0x9c48b95fe6536bf6L],
[0x0000000000000001L; 0x0000000000000001L; 0x0000000000000003L; 0x0000000000000005L; 0x0000000000000009L; 0x0000000000000011L; 0x0000000000000021L; 0x0000000000000041L; 0x0000000000000081L; 0x0000000000000101L; 0x0000000000000201L; 0x0000000000000401L; 0x0000000000000801L; 0x0000000000001001L; 0x0000000000002001L; 0x0000000000004001L; 0x0000000000008001L; 0x0000000000010001L; 0x0000000000020001L; 0x0000000000040001L; 0x0000000000080001L; 0x0000000000100001L; 0x0000000000200001L; 0x0000000000400001L; 0x0000000000800001L; 0x0000000001000001L; 0x0000000002000001L; 0x0000000004000001L; 0x0000000008000001L; 0x0000000010000001L; 0x0000000020000001L; 0x0000000040000001L; 0x0000000080000001L; 0x0000000100000001L; 0x0000000200000001L; 0x0000000400000001L; 0x0000000800000001L; 0x0000001000000001L; 0x0000002000000001L; 0x0000004000000001L; 0x0000008000000001L; 0x0000010000000001L; 0x0000020000000001L; 0x0000040000000001L; 0x0000080000000001L; 0x0000100000000001L; 0x0000200000000001L; 0x0000400000000001L; 0x0000800000000001L; 0x0001000000000001L; 0x0002000000000001L; 0x0004000000000001L; 0x0008000000000001L; 0x0010000000000001L; 0x0020000000000001L; 0x0040000000000001L; 0x0080000000000001L; 0x0100000000000001L; 0x0200000000000001L; 0x0400000000000001L; 0x0800000000000001L; 0x1000000000000001L; 0x2000000000000001L; 0x4000000000000001L; 0x1867e0bdf3d2fc35L; 0x78efdeb89381ceafL; 0x1aa37776c7d27a45L; 0x5747a12cbbbab8a7L; 0x393e2d9347666a09L; 0x0cdfc8b9a6a15a57L; 0x2afd49204c957a57L; 0x3150120748646397L; 0x01d7d4f9ae8681c3L; 0x320b6ed0602c58ddL; 0x1a9c70ad8c8002a9L; 0x739596fd6be5433fL; 0x0e912d84851d9d39L; 0x427ba9e0f5d04ea3L; 0x7e613d1733cb08afL; 0x2555d680c01f8f51L; 0x2a99fe14e6314b25L; 0x7aef3a3e0542261dL; 0x6f7fdf82892f60e9L; 0x775d6abd7f9bf4f1L; 0x5e19e9659db6e8c7L; 0x015221d203f66e63L; 0x72149e85ab512f23L; 0x26011d111ac622efL; 0x41c0b263d4f1cb61L; 0x504bb7471a7990f1L; 0x554fadc45fb60a21L; 0x3ab75ce023abd215L; 0x7dbb36d7583b15f5L; 0x06ddf9e9782d2f39L; 0x78b73c8569d1e1f5L; 0x2884121d4b4e72b3L; 0x0dd97710b5133325L; 0x16a5fd4d65644d07L; 0x0c0ed032a57631dfL; 0x6e2a23ae336fc545L; 0x155a25a7cb734115L; 0x0ec06e918b9e3cf1L; 0x45ddf30c365464fbL; 0x65c8046d6fb077abL; 0x4bf39d274a6d964dL; 0x7102c307878b753fL; 0x72f1a909786e64fbL; 0x36667d927828cab1L; 0x18bf5369e7e50841L; 0x1416eed556a6bf6bL; 0x064046975e640105L; 0x7a50c006820aeab1L; 0x614efc11ca671c13L; 0x0d5f255cfd7532b7L; 0x1b24b68d68382dbdL; 0x484fe7d6bddd8dd1L; 0x7ecc4299b9d8e1c7L; 0x43e2aa8337980b71L; 0x6f96f1bb697fc713L; 0x443c08fb048a02c1L; 0x12c0425ed349aa3bL; 0x35a00b6068140083L; 0x4cd7f43e216f2f51L; 0x7e9ac18b5ac10809L; 0x758823142a8212f3L; 0x502290aaea0680e7L; 0x2d0677215cbdeb0dL; 0x2cd238bc1d0669d9L; 0x03aa0daa84c1f369L; 0x6303c4a28b6ca999L; 0x5c2925ac8c987879L; 0x5b2ae512403da523L; 0x1b77571158eace2fL; 0x55c2b8431947aa39L; 0x5c6c371ce6b7920fL; 0x07eeac1b42847e21L; 0x1de27a69cbd151c9L; 0x14fb0ec7dd7c69c9L; 0x0402a495d34b3395L; 0x5c50d316be8f5407L; 0x267fd777cb7cae01L; 0x05c2fbefea09d7c1L; 0x58c5180bbd77df89L; 0x17fe0cb4fda6800dL; 0x5954394a9b4f809fL; 0x309f8e9bb82e4369L; 0x4c1dfd78f95b5971L; 0x5a008b8ee1addcd3L; 0x41b52a2739ce2bb9L; 0x4429ebdae4d5c383L; 0x3511b2ff84d301b7L; 0x0f59a989be80c723L; 0x759fe620d0cecbc7L; 0x49f93e28cf711633L; 0x03dc27a49ac931ebL; 0x1e730138126fbf79L; 0x59c2bd555637599fL; 0x1818a8f2090015cbL; 0x411f9baad63ad0a3L; 0x7a244e22ffe76f63L; 0x0808b22421f28603L; 0x525c24fb769c670dL; 0x18d3d7215ee16a73L; 0x7a0409537edbd70bL; 0x68fa7ecd9f13d6b7L; 0x7c97e0593c4c9a21L; 0x5b0d31afc7bd982dL; 0x5ba47ea381a64569L; 0x308702b22d3be7b9L; 0x72cc2315ae18a959L; 0x50a22b5da030511bL; 0x315dc0b2d27fad2fL; 0x7e02e64b59162765L; 0x6e6ac4edf321b589L; 0x3466e015b80728fbL; 0x70d321f4dd8ad9dfL; 0x24c5aea417e5c6b7L; 0x56c073aefcbbc645L; 0x14622ad69cd8d405L; 0x586041585323a0f1L; 0x2a9326e103fcb369L; 0x01db7b5f85ef8865L; 0x505fd843ecc3b1bbL; 0x0686576f16908669L; 0x2fd3c29e7d5352c5L; 0x4a4829bd57c0dc05L; 0x53ed71ee4d64e177L; 0x1ff7e8c86c7ba6fbL; 0x48ede71832901ce1L; 0x0eb24f55aef2f42dL; 0x18d888a37048ce41L; 0x69efcad2b1dde97fL; 0x1cb77d22595de863L; 0x6d3cda7296fd0c21L; 0x64e97b619e8a7ecdL; 0x242c65987a976817L; 0x03a0a515c373e853L; 0x0b93f9cb24294841L; 0x5b1ba3f79b5d246bL; 0x2a10e8a0337e4215L; 0x12e47d91bbe1297bL; 0x62419bb04286bbd3L; 0x4722f6e8369a5b71L; 0x4e65f633ad7ed517L; 0x04bfe7babce85247L; 0x7b9b5bdf29ddb24fL; 0x2e26129e9a229225L; 0x0d04eac6b5caccd3L; 0x3108052e118fa145L; 0x44573fb43a07c0ebL; 0x0c349fd9bb9b436bL; 0x04914b0b8869d7e5L; 0x4dba254844649473L; 0x353bed17c9a9a0d5L; 0x2559ddbee84f2211L; 0x44e6b8b1f45d62a3L; 0x62ecad32bcdacb63L; 0x349a133ebb6667bfL; 0x699dbd17a00addb5L; 0x14457011430dabc3L; 0x54eacaad4506ccedL; 0x4e93907b1258f6bbL; 0x73597a7379cb5ea9L; 0x7f5ffcaf7a95ece7L; 0x235e53981b95da45L; 0x292f30bac9822033L; 0x65c4ffbe472b605bL; 0x0bad9886e0e2d689L; 0x17e0b642c1f66995L; 0x4022fe48b7555b83L; 0x3c7a25da1b8cec11L; 0x3b9fbed2e80f5043L; 0x50583f37c3f31433L; 0x05eca05c9ceef577L; 0x2f2e28328c6f4883L; 0x3a548db37db265f7L; 0x7b90d148b7e7474fL; 0x2e74a171706cd12bL; 0x4940f00d8c74eac5L; 0x259f37be4f75c217L; 0x1c69dc44989ee097L; 0x1cfd377ac7f408edL; 0x4e2b03348204841fL; 0x20a72aa18b84977fL; 0x064d07f883a8be31L; 0x7e7c06c6bc05552dL; 0x3d87465f11735197L; 0x619eacb9910dee5dL; 0x11ce5f65d7002759L; 0x4e638c723076bdebL; 0x531ec75789451365L; 0x25399ae1af9c9059L; 0x56bbe460b79a0561L; 0x4b94e8f949d2ae15L; 0x619dbb5851fed9dfL; 0x4e245caff329b5fbL])

let check_brute id allowed_ops_tuple size challenge count =
  Printf.eprintf
    "id: %s\n  %s\n  size: %d\n  original: %s\n"
    id
    (format_operator_tuple allowed_ops_tuple)
    size
    challenge;
  flush_all ();

  let answers, _ = Brute.gen2 allowed_ops_tuple size (Brute.create_db allowed_ops_tuple) in

  Printf.eprintf "Generated size=%d\n" (List.length answers);
  (* List.iter *)
  (*   (fun x -> prerr_endline ("  " ^ (Print.print x))) *)
  (*   answers; *)
  flush_all ();

  let answer = List.nth answers (Random.int (List.length answers)) in
  Printf.eprintf
    "  picked:   %s\n"
    (Print.print answer);
  flush_all ();

  let initialguess =
    let bitseq = 
      Array.to_list
        (Array.init 64 (fun x -> Int64.shift_left 1L x)) in
    let fixedseq =
      [0x0000000000000000L;
       0x0000000000000001L;
       0x0000000000000002L;
       0x0000000000000003L;
       0x0000000000000004L;
       0x0000000000000005L;
       0x0000000000000006L;
       0x0000000000000007L;
       0x0000000000000008L;
       0x0000000000000009L;
       0x000000000000000aL;
       0x000000000000000bL;
       0x00000000FFFFFFFFL;
       0xFFFFFFFF00000000L;
       0x0000FFFF0000FFFFL;
       0xFFFF0000FFFF0000L;
       (* 0x00FF00FF00FF00FFL; *)
       (* 0xFF00FF00FF00FF00L; *)
       (* 0x0F0F0F0F0F0F0F0FL; *)
       (* 0xF0F0F0F0F0F0F0F0L; *)
       (* 0x3333333333333333L; *)
       (* 0xCCCCCCCCCCCCCCCCL; *)
       (* 0x5555555555555555L; *)
       (* 0xAAAAAAAAAAAAAAAAL; *)
       (* 0x0000FFFFFFFF0000L; *)
       (* 0xFFFF00000000FFFFL; *)
       (* 0xFF0000FFFF0000FFL; *)
       (* 0x00FFFF0000FFFF00L; *)
       (* 0xF00FF00FF00FF00FL; *)
       (* 0x0FF00FF00FF00FF0L; *)
       (* 0xDEADBEEFDEADBEEFL; *)
       0xFFFFFFFFFFFFFFFFL
      ] in
    let randseq = 
      Array.to_list
        (Random.init 0;
         Array.init
           (256 - (List.length bitseq) - (List.length fixedseq))
           (fun _ -> rand64 ()))
    in
    bitseq @ fixedseq @ randseq
  in

  let outputs =
    List.map
      (fun x ->
        eval answer x)
      initialguess
  in

  let guess_function x c =
    Printf.eprintf
      "  guess:    %s\n"
      (Print.print x);
    flush_all ();
    count := !count + c;
    Feedback.Success
  in

  (* Solve! *)
  let alllist, _ = Brute.gen2 allowed_ops_tuple size (Brute.create_db allowed_ops_tuple) in
  GuessCaller.guess_call
    (List.combine initialguess outputs)
    guess_function
    allowed_ops_tuple
    size
    alllist
;;

let rec check_by_train_list () =
  let train_string = read_line () in
  let train = parse_train_string train_string in
  let id, size, allowed_ops_tuple, challenge = train in

  let count = ref 0 in

  check_brute id allowed_ops_tuple 12 challenge count;
  check_by_train_list ()
;;

let check_by_problems () =
  let problems_string = read_line () in
  let problems_json = Yojson.Safe.from_string problems_string in
  let problems = Problem.parse_problems_json problems_json in

  let sorted_problems =
    List.sort
      (fun (_, x_size, (_, _, x_s), _, _) (_, y_size, (_, _, y_s), _, _) ->
        let l_diff = (List.length x_s) - (List.length y_s) in
        if l_diff != 0
        then l_diff
        else x_size - y_size)
      problems
  in

  let count = ref 0 in

  List.iter
    (fun (id, size, allowed_ops_tuple, solved, time_over) ->
      if size < 12 then
        begin
          ();
          (* Printf.eprintf "Count: %d" !count; *)
          (* failwith "stop" *)
        end
      else
        check_brute
          id
          allowed_ops_tuple
          size
          ((if solved then "T" else "F") ^ ", " ^ (string_of_float time_over)) count)
    sorted_problems
;;

unittest case0;
unittest case1;
unittest case2
(* check_by_train_list () *)
(* check_by_problems () *)
